// <auto-generated />
using System;
using MealTimes.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MealTimes.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250630155137_AddDietaryPreference")]
    partial class AddDietaryPreference
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MealTimes.Core.Models.Admin", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("AdminID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("MealTimes.Core.Models.CompanySubscriptionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CorporateCompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubscribedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubscriptionPlanID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CorporateCompanyId");

                    b.HasIndex("SubscriptionPlanID");

                    b.ToTable("CompanySubscriptionHistories");
                });

            modelBuilder.Entity("MealTimes.Core.Models.CorporateCompany", b =>
                {
                    b.Property<int>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyID"));

                    b.Property<int?>("ActiveSubscriptionPlanID")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AdminID")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PlanEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PlanStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SubscriptionPlanID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CompanyID");

                    b.HasIndex("ActiveSubscriptionPlanID");

                    b.HasIndex("AdminID");

                    b.HasIndex("SubscriptionPlanID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("CorporateCompanies");
                });

            modelBuilder.Entity("MealTimes.Core.Models.Delivery", b =>
                {
                    b.Property<int>("DeliveryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryID"));

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeliveryPersonID")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryServiceName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PickedUpAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DeliveryID");

                    b.HasIndex("DeliveryPersonID");

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("MealTimes.Core.Models.DeliveryPerson", b =>
                {
                    b.Property<int>("DeliveryPersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryPersonID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("VehicleInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeliveryPersonID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("DeliveryPersons");
                });

            modelBuilder.Entity("MealTimes.Core.Models.DietaryPreference", b =>
                {
                    b.Property<int>("DietaryPreferenceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DietaryPreferenceID"));

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("Preferences")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Restrictions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DietaryPreferenceID");

                    b.HasIndex("EmployeeID")
                        .IsUnique();

                    b.ToTable("DietaryPreferences");
                });

            modelBuilder.Entity("MealTimes.Core.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"));

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("DietaryPreferences")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("EmployeeID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("MealTimes.Core.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackID"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("FeedbackID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("OrderID");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("MealTimes.Core.Models.HomeChef", b =>
                {
                    b.Property<int>("ChefID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChefID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ChefID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("HomeChefs");
                });

            modelBuilder.Entity("MealTimes.Core.Models.Meal", b =>
                {
                    b.Property<int>("MealID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MealID"));

                    b.Property<bool>("Availability")
                        .HasColumnType("bit");

                    b.Property<int>("ChefID")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MealCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MealDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MealName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PreparationTime")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("MealID");

                    b.HasIndex("ChefID");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("MealTimes.Core.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<int>("ChefID")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderID");

                    b.HasIndex("ChefID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MealTimes.Core.Models.OrderMeal", b =>
                {
                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("MealID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderID", "MealID");

                    b.HasIndex("MealID");

                    b.ToTable("OrderMeals");
                });

            modelBuilder.Entity("MealTimes.Core.Models.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"));

                    b.Property<int?>("CorporateCompanyID")
                        .HasColumnType("int");

                    b.Property<int?>("OrderID")
                        .HasColumnType("int");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeSessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubscriptionPlanID")
                        .HasColumnType("int");

                    b.HasKey("PaymentID");

                    b.HasIndex("CorporateCompanyID");

                    b.HasIndex("OrderID")
                        .IsUnique()
                        .HasFilter("[OrderID] IS NOT NULL");

                    b.HasIndex("SubscriptionPlanID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("MealTimes.Core.Models.SubscriptionPlan", b =>
                {
                    b.Property<int>("SubscriptionPlanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionPlanID"));

                    b.Property<int>("DurationInDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsCustomizable")
                        .HasColumnType("bit");

                    b.Property<int>("MaxEmployees")
                        .HasColumnType("int");

                    b.Property<int>("MealLimitPerDay")
                        .HasColumnType("int");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SubscriptionPlanID");

                    b.ToTable("SubscriptionPlans");
                });

            modelBuilder.Entity("MealTimes.Core.Models.ThirdPartyDeliveryService", b =>
                {
                    b.Property<int>("DeliveryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryID"));

                    b.Property<string>("DeliveryPartnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("EstimatedDeliveryTime")
                        .HasColumnType("time");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.HasKey("DeliveryID");

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.ToTable("ThirdPartyDeliveryServices");
                });

            modelBuilder.Entity("MealTimes.Core.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MealTimes.Core.Models.Admin", b =>
                {
                    b.HasOne("MealTimes.Core.Models.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("MealTimes.Core.Models.Admin", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MealTimes.Core.Models.CompanySubscriptionHistory", b =>
                {
                    b.HasOne("MealTimes.Core.Models.CorporateCompany", "CorporateCompany")
                        .WithMany()
                        .HasForeignKey("CorporateCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MealTimes.Core.Models.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany()
                        .HasForeignKey("SubscriptionPlanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CorporateCompany");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("MealTimes.Core.Models.CorporateCompany", b =>
                {
                    b.HasOne("MealTimes.Core.Models.SubscriptionPlan", "ActiveSubscriptionPlan")
                        .WithMany()
                        .HasForeignKey("ActiveSubscriptionPlanID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MealTimes.Core.Models.Admin", null)
                        .WithMany()
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MealTimes.Core.Models.SubscriptionPlan", null)
                        .WithMany("CompaniesUsingThisPlan")
                        .HasForeignKey("SubscriptionPlanID");

                    b.HasOne("MealTimes.Core.Models.User", "User")
                        .WithOne("CorporateCompany")
                        .HasForeignKey("MealTimes.Core.Models.CorporateCompany", "UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActiveSubscriptionPlan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MealTimes.Core.Models.Delivery", b =>
                {
                    b.HasOne("MealTimes.Core.Models.DeliveryPerson", "DeliveryPerson")
                        .WithMany("Deliveries")
                        .HasForeignKey("DeliveryPersonID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MealTimes.Core.Models.Order", "Order")
                        .WithOne("Delivery")
                        .HasForeignKey("MealTimes.Core.Models.Delivery", "OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryPerson");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MealTimes.Core.Models.DeliveryPerson", b =>
                {
                    b.HasOne("MealTimes.Core.Models.User", "User")
                        .WithOne("DeliveryPerson")
                        .HasForeignKey("MealTimes.Core.Models.DeliveryPerson", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MealTimes.Core.Models.DietaryPreference", b =>
                {
                    b.HasOne("MealTimes.Core.Models.Employee", "Employee")
                        .WithOne("DietaryPreference")
                        .HasForeignKey("MealTimes.Core.Models.DietaryPreference", "EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MealTimes.Core.Models.Employee", b =>
                {
                    b.HasOne("MealTimes.Core.Models.CorporateCompany", "CorporateCompany")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MealTimes.Core.Models.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("MealTimes.Core.Models.Employee", "UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CorporateCompany");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MealTimes.Core.Models.Feedback", b =>
                {
                    b.HasOne("MealTimes.Core.Models.Employee", "Employee")
                        .WithMany("Feedbacks")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MealTimes.Core.Models.Order", "Order")
                        .WithMany("Feedbacks")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MealTimes.Core.Models.HomeChef", b =>
                {
                    b.HasOne("MealTimes.Core.Models.User", "User")
                        .WithOne("HomeChef")
                        .HasForeignKey("MealTimes.Core.Models.HomeChef", "UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MealTimes.Core.Models.Meal", b =>
                {
                    b.HasOne("MealTimes.Core.Models.HomeChef", "Chef")
                        .WithMany("Meals")
                        .HasForeignKey("ChefID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chef");
                });

            modelBuilder.Entity("MealTimes.Core.Models.Order", b =>
                {
                    b.HasOne("MealTimes.Core.Models.HomeChef", "Chef")
                        .WithMany("Orders")
                        .HasForeignKey("ChefID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MealTimes.Core.Models.Employee", "Employee")
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Chef");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MealTimes.Core.Models.OrderMeal", b =>
                {
                    b.HasOne("MealTimes.Core.Models.Meal", "Meal")
                        .WithMany("OrderMeals")
                        .HasForeignKey("MealID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MealTimes.Core.Models.Order", "Order")
                        .WithMany("OrderMeals")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MealTimes.Core.Models.Payment", b =>
                {
                    b.HasOne("MealTimes.Core.Models.CorporateCompany", "CorporateCompany")
                        .WithMany()
                        .HasForeignKey("CorporateCompanyID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MealTimes.Core.Models.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("MealTimes.Core.Models.Payment", "OrderID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MealTimes.Core.Models.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany()
                        .HasForeignKey("SubscriptionPlanID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CorporateCompany");

                    b.Navigation("Order");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("MealTimes.Core.Models.ThirdPartyDeliveryService", b =>
                {
                    b.HasOne("MealTimes.Core.Models.Order", "Order")
                        .WithOne("ThirdPartyDeliveryService")
                        .HasForeignKey("MealTimes.Core.Models.ThirdPartyDeliveryService", "OrderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MealTimes.Core.Models.CorporateCompany", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("MealTimes.Core.Models.DeliveryPerson", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("MealTimes.Core.Models.Employee", b =>
                {
                    b.Navigation("DietaryPreference")
                        .IsRequired();

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MealTimes.Core.Models.HomeChef", b =>
                {
                    b.Navigation("Meals");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MealTimes.Core.Models.Meal", b =>
                {
                    b.Navigation("OrderMeals");
                });

            modelBuilder.Entity("MealTimes.Core.Models.Order", b =>
                {
                    b.Navigation("Delivery");

                    b.Navigation("Feedbacks");

                    b.Navigation("OrderMeals");

                    b.Navigation("Payment");

                    b.Navigation("ThirdPartyDeliveryService");
                });

            modelBuilder.Entity("MealTimes.Core.Models.SubscriptionPlan", b =>
                {
                    b.Navigation("CompaniesUsingThisPlan");
                });

            modelBuilder.Entity("MealTimes.Core.Models.User", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("CorporateCompany");

                    b.Navigation("DeliveryPerson");

                    b.Navigation("Employee");

                    b.Navigation("HomeChef");
                });
#pragma warning restore 612, 618
        }
    }
}
